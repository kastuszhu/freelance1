#from input import *
import glob, os
import pandas as pd
import datetime as dt
import xml.etree.ElementTree as ET



class XML2DataFrame:

    def __init__(self, xml_data):
        self.root = ET.XML(xml_data)

    def parse_element(self, element):
        #results = {}
        if element.tag == 'SEM21':
            #results['SEM21']
            return self.parse_middle(element)
        if element.tag == 'SEM02':
            return self.parse_middle(element)
        if element.tag == 'SEM03':
            return self.parse_middle(element)


        for child in list(element):
            child_result = self.parse_element(child)
            if child_result is not None:
                return child_result
                #if tag not in results.keys():
                #    results[tag] = []
                #results[tag].append(child_result)

        return None

    def parse_middle(self, element):
        boards = []
        records = []
        for child in list(element):
            if child.tag == 'RECORDS':
                record = self.parse_record(child)
                if record is not None: records.append(record)
            else:
                board = self.parse_middle(child)
                if board is not None: boards.append(board)

        if len(records) > 0:
            boards.append(pd.DataFrame(records))

        if len(boards) > 0:
            result = pd.concat(boards)
            for key in element.keys():
                result[key] = element.attrib.get(key)
            return result

        return None

    @staticmethod
    def parse_record(record):
        result = {}
        for key in record.keys():
            result[key] = record.attrib.get(key)
        return result

    def process_data(self):
        """ Initiate the root XML, parse it, and return a dataframe"""
        boards = list(filter(lambda board: board is not None, [self.parse_element(child) for child in list(self.root)]))
        return pd.concat(boards) if len(boards) > 0 else None


def main(path=None):
    if path:
        os.chdir(path)

    dates = set()
    sem3_df, type_dates = load_deal_files('SEM03')
    dates.update(type_dates)
    sem3_df.to_csv('SEM03.csv', index=False)

    all_files = os.listdir(path)
    for date in dates:
        date_files = list(filter(lambda file: date in file, all_files))
        if date_files:
            with open(date_files[0]) as f:
                xml2df = XML2DataFrame(f.read())
                xml_dataframe = xml2df.process_data()


def load_deal_files(type):
    all_dfs = []
    dates = set()
    for file in glob.glob('*_' + type + '_*.xml'):

        with open(file) as f:
            xml2df = XML2DataFrame(f.read())
            xml_dataframe = xml2df.process_data()
            if xml_dataframe is not None:
                all_dfs.append(xml_dataframe)
    if len(all_dfs) > 0:
        sem03_df = pd.concat(all_dfs)
        dates.update(sem03_df.TradeDate.astype(dt.datetime).unique())

    return sem03_df, dates

main()



